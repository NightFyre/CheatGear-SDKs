#pragma once

/**
 * Name: Marauders
 * Version: 642675-attempt2
 */

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace CG
{
	// --------------------------------------------------
	// # Classes
	// --------------------------------------------------
	/**
	 * Class GameLift.GameLiftClientObject
	 * Size -> 0x0008 (FullSize[0x0030] - InheritedSize[0x0028])
	 */
	class UGameLiftClientObject : public UObject
	{
	public:
		unsigned char                                              UnknownData_M8YY[0x8];                                   // 0x0028(0x0008) MISSED OFFSET (PADDING)

	public:
		void ValidateMatchmakingRuleSet(class UObject* WorldContextObject, bool* Success, const struct FValidateMatchmakingRuleSetRequest& ValidateMatchmakingRuleSetRequest, struct FValidateMatchmakingRuleSetResult* ValidateMatchmakingRuleSetResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateScript(class UObject* WorldContextObject, bool* Success, const struct FUpdateScriptRequest& UpdateScriptRequest, struct FUpdateScriptResult* UpdateScriptResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateRuntimeConfiguration(class UObject* WorldContextObject, bool* Success, const struct FUpdateRuntimeConfigurationRequest& UpdateRuntimeConfigurationRequest, struct FUpdateRuntimeConfigurationResult* UpdateRuntimeConfigurationResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateMatchmakingConfiguration(class UObject* WorldContextObject, bool* Success, const struct FUpdateMatchmakingConfigurationRequest& UpdateMatchmakingConfigurationRequest, struct FUpdateMatchmakingConfigurationResult* UpdateMatchmakingConfigurationResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateGameSessionQueue(class UObject* WorldContextObject, bool* Success, const struct FUpdateGameSessionQueueRequest& UpdateGameSessionQueueRequest, struct FUpdateGameSessionQueueResult* UpdateGameSessionQueueResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateGameSession(class UObject* WorldContextObject, bool* Success, const struct FUpdateGameSessionRequest& UpdateGameSessionRequest, struct FUpdateGameSessionResult* UpdateGameSessionResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateGameServerGroup(class UObject* WorldContextObject, bool* Success, const struct FUpdateGameServerGroupRequest& UpdateGameServerGroupRequest, struct FUpdateGameServerGroupResult* UpdateGameServerGroupResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateGameServer(class UObject* WorldContextObject, bool* Success, const struct FUpdateGameServerRequest& UpdateGameServerRequest, struct FUpdateGameServerResult* UpdateGameServerResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateFleetPortSettings(class UObject* WorldContextObject, bool* Success, const struct FUpdateFleetPortSettingsRequest& UpdateFleetPortSettingsRequest, struct FUpdateFleetPortSettingsResult* UpdateFleetPortSettingsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateFleetCapacity(class UObject* WorldContextObject, bool* Success, const struct FUpdateFleetCapacityRequest& UpdateFleetCapacityRequest, struct FUpdateFleetCapacityResult* UpdateFleetCapacityResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateFleetAttributes(class UObject* WorldContextObject, bool* Success, const struct FUpdateFleetAttributesRequest& UpdateFleetAttributesRequest, struct FUpdateFleetAttributesResult* UpdateFleetAttributesResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateBuild(class UObject* WorldContextObject, bool* Success, const struct FUpdateBuildRequest& UpdateBuildRequest, struct FUpdateBuildResult* UpdateBuildResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UpdateAlias(class UObject* WorldContextObject, bool* Success, const struct FGameLiftUpdateAliasRequest& updateAliasRequest, struct FGameLiftUpdateAliasResult* updateAliasResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void UntagResource(class UObject* WorldContextObject, bool* Success, const struct FGameLiftUntagResourceRequest& untagResourceRequest, struct FUntagResourceResult* UntagResourceResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void TagResource(class UObject* WorldContextObject, bool* Success, const struct FGameLiftTagResourceRequest& tagResourceRequest, struct FGameLiftTagResourceResult* tagResourceResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void SuspendGameServerGroup(class UObject* WorldContextObject, bool* Success, const struct FSuspendGameServerGroupRequest& SuspendGameServerGroupRequest, struct FSuspendGameServerGroupResult* SuspendGameServerGroupResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void StopMatchmaking(class UObject* WorldContextObject, bool* Success, const struct FStopMatchmakingRequest& StopMatchmakingRequest, struct FStopMatchmakingResult* StopMatchmakingResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void StopGameSessionPlacement(class UObject* WorldContextObject, bool* Success, const struct FStopGameSessionPlacementRequest& StopGameSessionPlacementRequest, struct FStopGameSessionPlacementResult* StopGameSessionPlacementResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void StopFleetActions(class UObject* WorldContextObject, bool* Success, const struct FStopFleetActionsRequest& StopFleetActionsRequest, struct FStopFleetActionsResult* StopFleetActionsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void StartMatchmaking(class UObject* WorldContextObject, bool* Success, const struct FStartMatchmakingRequest& StartMatchmakingRequest, struct FStartMatchmakingResult* StartMatchmakingResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void StartMatchBackfill(class UObject* WorldContextObject, bool* Success, const struct FStartMatchBackfillRequest& StartMatchBackfillRequest, struct FStartMatchBackfillResult* StartMatchBackfillResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void StartGameSessionPlacement(class UObject* WorldContextObject, bool* Success, const struct FStartGameSessionPlacementRequest& StartGameSessionPlacementRequest, struct FStartGameSessionPlacementResult* StartGameSessionPlacementResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void StartFleetActions(class UObject* WorldContextObject, bool* Success, const struct FStartFleetActionsRequest& StartFleetActionsRequest, struct FStartFleetActionsResult* StartFleetActionsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void SearchGameSessions(class UObject* WorldContextObject, bool* Success, const struct FSearchGameSessionsRequest& SearchGameSessionsRequest, struct FSearchGameSessionsResult* SearchGameSessionsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ResumeGameServerGroup(class UObject* WorldContextObject, bool* Success, const struct FResumeGameServerGroupRequest& ResumeGameServerGroupRequest, struct FResumeGameServerGroupResult* ResumeGameServerGroupResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ResolveAlias(class UObject* WorldContextObject, bool* Success, const struct FResolveAliasRequest& ResolveAliasRequest, struct FResolveAliasResult* ResolveAliasResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void RequestUploadCredentials(class UObject* WorldContextObject, bool* Success, const struct FRequestUploadCredentialsRequest& RequestUploadCredentialsRequest, struct FRequestUploadCredentialsResult* RequestUploadCredentialsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void RegisterGameServer(class UObject* WorldContextObject, bool* Success, const struct FRegisterGameServerRequest& RegisterGameServerRequest, struct FRegisterGameServerResult* RegisterGameServerResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void PutScalingPolicy(class UObject* WorldContextObject, bool* Success, const struct FPutScalingPolicyRequest& PutScalingPolicyRequest, struct FPutScalingPolicyResult* PutScalingPolicyResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ListTagsForResource(class UObject* WorldContextObject, bool* Success, const struct FGameLiftListTagsForResourceRequest& listTagsForResourceRequest, struct FGameLiftListTagsForResourceResult* listTagsForResourceResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ListScripts(class UObject* WorldContextObject, bool* Success, const struct FListScriptsRequest& ListScriptsRequest, struct FListScriptsResult* ListScriptsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ListGameServers(class UObject* WorldContextObject, bool* Success, const struct FListGameServersRequest& ListGameServersRequest, struct FListGameServersResult* ListGameServersResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ListGameServerGroups(class UObject* WorldContextObject, bool* Success, const struct FListGameServerGroupsRequest& ListGameServerGroupsRequest, struct FListGameServerGroupsResult* ListGameServerGroupsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ListFleets(class UObject* WorldContextObject, bool* Success, const struct FListFleetsRequest& ListFleetsRequest, struct FListFleetsResult* ListFleetsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ListBuilds(class UObject* WorldContextObject, bool* Success, const struct FListBuildsRequest& ListBuildsRequest, struct FListBuildsResult* ListBuildsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ListAliases(class UObject* WorldContextObject, bool* Success, const struct FGameLiftListAliasesRequest& listAliasesRequest, struct FGameLiftListAliasesResult* listAliasesResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void GetInstanceAccess(class UObject* WorldContextObject, bool* Success, const struct FGetInstanceAccessRequest& GetInstanceAccessRequest, struct FGetInstanceAccessResult* GetInstanceAccessResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void GetGameSessionLogUrl(class UObject* WorldContextObject, bool* Success, const struct FGetGameSessionLogUrlRequest& GetGameSessionLogUrlRequest, struct FGetGameSessionLogUrlResult* GetGameSessionLogUrlResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeVpcPeeringConnections(class UObject* WorldContextObject, bool* Success, const struct FDescribeVpcPeeringConnectionsRequest& DescribeVpcPeeringConnectionsRequest, struct FDescribeVpcPeeringConnectionsResult* DescribeVpcPeeringConnectionsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeVpcPeeringAuthorizations(class UObject* WorldContextObject, bool* Success, const struct FDescribeVpcPeeringAuthorizationsRequest& DescribeVpcPeeringAuthorizationsRequest, struct FDescribeVpcPeeringAuthorizationsResult* DescribeVpcPeeringAuthorizationsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeScript(class UObject* WorldContextObject, bool* Success, const struct FDescribeScriptRequest& DescribeScriptRequest, struct FDescribeScriptResult* DescribeScriptResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeScalingPolicies(class UObject* WorldContextObject, bool* Success, const struct FDescribeScalingPoliciesRequest& DescribeScalingPoliciesRequest, struct FDescribeScalingPoliciesResult* DescribeScalingPoliciesResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeRuntimeConfiguration(class UObject* WorldContextObject, bool* Success, const struct FDescribeRuntimeConfigurationRequest& DescribeRuntimeConfigurationRequest, struct FDescribeRuntimeConfigurationResult* DescribeRuntimeConfigurationResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribePlayerSessions(class UObject* WorldContextObject, bool* Success, const struct FDescribePlayerSessionsRequest& DescribePlayerSessionsRequest, struct FDescribePlayerSessionsResult* DescribePlayerSessionsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeMatchmakingRuleSets(class UObject* WorldContextObject, bool* Success, const struct FDescribeMatchmakingRuleSetsRequest& DescribeMatchmakingRuleSetsRequest, struct FDescribeMatchmakingRuleSetsResult* DescribeMatchmakingRuleSetsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeMatchmakingConfigurations(class UObject* WorldContextObject, bool* Success, const struct FDescribeMatchmakingConfigurationsRequest& DescribeMatchmakingConfigurationsRequest, struct FDescribeMatchmakingConfigurationsResult* DescribeMatchmakingConfigurationsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeMatchmaking(class UObject* WorldContextObject, bool* Success, const struct FDescribeMatchmakingRequest& DescribeMatchmakingRequest, struct FDescribeMatchmakingResult* DescribeMatchmakingResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeInstances(class UObject* WorldContextObject, bool* Success, const struct FDescribeInstancesRequest& DescribeInstancesRequest, struct FDescribeInstancesResult* DescribeInstancesResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeGameSessions(class UObject* WorldContextObject, bool* Success, const struct FDescribeGameSessionsRequest& DescribeGameSessionsRequest, struct FDescribeGameSessionsResult* DescribeGameSessionsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeGameSessionQueues(class UObject* WorldContextObject, bool* Success, const struct FDescribeGameSessionQueuesRequest& DescribeGameSessionQueuesRequest, struct FDescribeGameSessionQueuesResult* DescribeGameSessionQueuesResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeGameSessionPlacement(class UObject* WorldContextObject, bool* Success, const struct FDescribeGameSessionPlacementRequest& DescribeGameSessionPlacementRequest, struct FDescribeGameSessionPlacementResult* DescribeGameSessionPlacementResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeGameSessionDetails(class UObject* WorldContextObject, bool* Success, const struct FDescribeGameSessionDetailsRequest& DescribeGameSessionDetailsRequest, struct FDescribeGameSessionDetailsResult* DescribeGameSessionDetailsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeGameServerInstances(class UObject* WorldContextObject, bool* Success, const struct FDescribeGameServerInstancesRequest& DescribeGameServerInstancesRequest, struct FDescribeGameServerInstancesResult* DescribeGameServerInstancesResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeGameServerGroup(class UObject* WorldContextObject, bool* Success, const struct FDescribeGameServerGroupRequest& DescribeGameServerGroupRequest, struct FDescribeGameServerGroupResult* DescribeGameServerGroupResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeGameServer(class UObject* WorldContextObject, bool* Success, const struct FDescribeGameServerRequest& DescribeGameServerRequest, struct FDescribeGameServerResult* DescribeGameServerResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeFleetUtilization(class UObject* WorldContextObject, bool* Success, const struct FDescribeFleetUtilizationRequest& DescribeFleetUtilizationRequest, struct FDescribeFleetUtilizationResult* DescribeFleetUtilizationResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeFleetPortSettings(class UObject* WorldContextObject, bool* Success, const struct FDescribeFleetPortSettingsRequest& DescribeFleetPortSettingsRequest, struct FDescribeFleetPortSettingsResult* DescribeFleetPortSettingsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeFleetLocationUtilization(class UObject* WorldContextObject, bool* Success, const struct FAWSGameLiftDescribeFleetLocationUtilizationRequest& describeFleetLocationUtilizationRequest, struct FAWSGameLiftDescribeFleetLocationUtilizationResult* describeFleetLocationUtilizationResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeFleetLocationCapacity(class UObject* WorldContextObject, bool* Success, const struct FAWSGameLiftDescribeFleetLocationCapacityRequest& describeFleetLocationCapacityRequest, struct FAWSGameLiftDescribeFleetLocationCapacityResult* describeFleetLocationCapacityResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeFleetLocationAttributes(class UObject* WorldContextObject, bool* Success, const struct FAWSGameLiftDescribeFleetLocationAttributesRequest& describeFleetLocationAttributesRequest, struct FAWSGameLiftDescribeFleetLocationAttributesResult* describeFleetLocationAttributesResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeFleetEvents(class UObject* WorldContextObject, bool* Success, const struct FDescribeFleetEventsRequest& DescribeFleetEventsRequest, struct FDescribeFleetEventsResult* DescribeFleetEventsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeFleetCapacity(class UObject* WorldContextObject, bool* Success, const struct FDescribeFleetCapacityRequest& DescribeFleetCapacityRequest, struct FDescribeFleetCapacityResult* DescribeFleetCapacityResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeFleetAttributes(class UObject* WorldContextObject, bool* Success, const struct FDescribeFleetAttributesRequest& DescribeFleetAttributesRequest, struct FDescribeFleetAttributesResult* DescribeFleetAttributesResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeEC2InstanceLimits(class UObject* WorldContextObject, bool* Success, const struct FDescribeEC2InstanceLimitsRequest& DescribeEC2InstanceLimitsRequest, struct FDescribeEC2InstanceLimitsResult* DescribeEC2InstanceLimitsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeBuild(class UObject* WorldContextObject, bool* Success, const struct FDescribeBuildRequest& DescribeBuildRequest, struct FDescribeBuildResult* DescribeBuildResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DescribeAlias(class UObject* WorldContextObject, bool* Success, const struct FDescribeAliasRequest& DescribeAliasRequest, struct FDescribeAliasResult* DescribeAliasResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeregisterGameServer(class UObject* WorldContextObject, bool* Success, const struct FDeregisterGameServerRequest& DeregisterGameServerRequest, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteVpcPeeringConnection(class UObject* WorldContextObject, bool* Success, const struct FDeleteVpcPeeringConnectionRequest& DeleteVpcPeeringConnectionRequest, struct FDeleteVpcPeeringConnectionResult* DeleteVpcPeeringConnectionResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteVpcPeeringAuthorization(class UObject* WorldContextObject, bool* Success, const struct FDeleteVpcPeeringAuthorizationRequest& DeleteVpcPeeringAuthorizationRequest, struct FDeleteVpcPeeringAuthorizationResult* DeleteVpcPeeringAuthorizationResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteScript(class UObject* WorldContextObject, bool* Success, const struct FDeleteScriptRequest& DeleteScriptRequest, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteScalingPolicy(class UObject* WorldContextObject, bool* Success, const struct FDeleteScalingPolicyRequest& DeleteScalingPolicyRequest, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteMatchmakingRuleSet(class UObject* WorldContextObject, bool* Success, const struct FDeleteMatchmakingRuleSetRequest& DeleteMatchmakingRuleSetRequest, struct FDeleteMatchmakingRuleSetResult* DeleteMatchmakingRuleSetResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteMatchmakingConfiguration(class UObject* WorldContextObject, bool* Success, const struct FDeleteMatchmakingConfigurationRequest& DeleteMatchmakingConfigurationRequest, struct FDeleteMatchmakingConfigurationResult* DeleteMatchmakingConfigurationResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteGameSessionQueue(class UObject* WorldContextObject, bool* Success, const struct FDeleteGameSessionQueueRequest& DeleteGameSessionQueueRequest, struct FDeleteGameSessionQueueResult* DeleteGameSessionQueueResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteGameServerGroup(class UObject* WorldContextObject, bool* Success, const struct FDeleteGameServerGroupRequest& DeleteGameServerGroupRequest, struct FDeleteGameServerGroupResult* DeleteGameServerGroupResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteFleetLocations(class UObject* WorldContextObject, bool* Success, const struct FAWSGameLiftDeleteFleetLocationsRequest& deleteFleetLocationsRequest, struct FAWSGameLiftDeleteFleetLocationsResult* deleteFleetLocationsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteFleet(class UObject* WorldContextObject, bool* Success, const struct FDeleteFleetRequest& DeleteFleetRequest, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteBuild(class UObject* WorldContextObject, bool* Success, const struct FDeleteBuildRequest& DeleteBuildRequest, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void DeleteAlias(class UObject* WorldContextObject, bool* Success, const struct FGameLiftDeleteAliasRequest& deleteAliasRequest, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateVpcPeeringConnection(class UObject* WorldContextObject, bool* Success, const struct FCreateVpcPeeringConnectionRequest& CreateVpcPeeringConnectionRequest, struct FCreateVpcPeeringConnectionResult* CreateVpcPeeringConnectionResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateVpcPeeringAuthorization(class UObject* WorldContextObject, bool* Success, const struct FCreateVpcPeeringAuthorizationRequest& CreateVpcPeeringAuthorizationRequest, struct FCreateVpcPeeringAuthorizationResult* CreateVpcPeeringAuthorizationResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateScript(class UObject* WorldContextObject, bool* Success, const struct FCreateScriptRequest& CreateScriptRequest, struct FCreateScriptResult* CreateScriptResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreatePlayerSessions(class UObject* WorldContextObject, bool* Success, const struct FCreatePlayerSessionsRequest& CreatePlayerSessionsRequest, struct FCreatePlayerSessionsResult* CreatePlayerSessionsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreatePlayerSession(class UObject* WorldContextObject, bool* Success, const struct FCreatePlayerSessionRequest& CreatePlayerSessionRequest, struct FCreatePlayerSessionResult* CreatePlayerSessionResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateMatchmakingRuleSet(class UObject* WorldContextObject, bool* Success, const struct FCreateMatchmakingRuleSetRequest& CreateMatchmakingRuleSetRequest, struct FCreateMatchmakingRuleSetResult* CreateMatchmakingRuleSetResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateMatchmakingConfiguration(class UObject* WorldContextObject, bool* Success, const struct FCreateMatchmakingConfigurationRequest& CreateMatchmakingConfigurationRequest, struct FCreateMatchmakingConfigurationResult* CreateMatchmakingConfigurationResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateGameSessionQueue(class UObject* WorldContextObject, bool* Success, const struct FCreateGameSessionQueueRequest& CreateGameSessionQueueRequest, struct FCreateGameSessionQueueResult* CreateGameSessionQueueResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateGameSession(class UObject* WorldContextObject, bool* Success, const struct FCreateGameSessionRequest& CreateGameSessionRequest, struct FCreateGameSessionResult* CreateGameSessionResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateGameServerGroup(class UObject* WorldContextObject, bool* Success, const struct FCreateGameServerGroupRequest& CreateGameServerGroupRequest, struct FCreateGameServerGroupResult* CreateGameServerGroupResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		class UGameLiftClientObject* CreateGameLiftObject(const struct FAWSCredentials& credentials, const struct FAWSClientConfiguration& clientConfiguration);
		void CreateFleetLocations(class UObject* WorldContextObject, bool* Success, const struct FAWSGameLiftCreateFleetLocationsRequest& createFleetLocationsRequest, struct FAWSGameLiftCreateFleetLocationsResult* createFleetLocationsResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateFleet(class UObject* WorldContextObject, bool* Success, const struct FCreateFleetRequest& CreateFleetRequest, struct FCreateFleetResult* CreateFleetResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateBuild(class UObject* WorldContextObject, bool* Success, const struct FCreateBuildRequest& CreateBuildRequest, struct FCreateBuildResult* CreateBuildResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void CreateAlias(class UObject* WorldContextObject, bool* Success, const struct FGameLiftCreateAliasRequest& createAliasRequest, struct FGameLiftCreateAliasResult* createAliasResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void ClaimGameServer(class UObject* WorldContextObject, bool* Success, const struct FClaimGameServerRequest& ClaimGameServerRequest, struct FClaimGameServerResult* ClaimGameServerResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		void AcceptMatch(class UObject* WorldContextObject, bool* Success, const struct FAcceptMatchRequest& AcceptMatchRequest, struct FAcceptMatchResult* AcceptMatchResult, EGameLiftError* errorType, class FString* ErrorMessage, const struct FLatentActionInfo& LatentInfo);
		static UClass* StaticClass();
	};

	/**
	 * Class GameLift.GameLiftUtils
	 * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
	 */
	class UGameLiftUtils : public UBlueprintFunctionLibrary
	{
	public:
		EGameLiftARNType IdentifyGameLiftARNType(const class FString& awsResourceName);
		static UClass* StaticClass();
	};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
